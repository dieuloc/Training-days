1. Write the code to sum all salaries and store in the variable sum. Should be 390 in the example above.

let salaries = {
  John: 100,
  Ann: 160,
  Pete: 130
};

let sum = 0;
for (let key in salaries) {
  sum += salaries[key];
}

console.log(sum); // 390


2. Create a function multiplyNumeric(obj) that multiplies all numeric properties of obj by 2

function multiplyNumeric(obj) {
  for (let key in obj) {
    if (typeof obj[key] == 'number') {
      obj[key] *= 2;
    }
  }
}

3. Write a function checkEmailId(str) that returns true if str contains '@' and ‘.’, otherwise false. Make sure '@' must come before '.' and there must be some characters between '@' and '.'
The function must be case-insensitive:

function checkEmailId(str){
	var mailformat = /@\w+./gmi;
	
	if(str.value.match(mailformat)){
		alert("Valid email address!");
		return true;
	}
	else{
		alert("You have entered an invalid email address!");
		return false;
	}
}

4. Create a function truncate(str, maxlength) that checks the length of the str and, if it exceeds maxlength – replaces the end of str with the ellipsis character "…", to make its length equal to maxlength.
The result of the function should be the truncated (if needed) string.
truncate("What I'd like to tell on this topic is:", 20) = "What I'd like to te…"

function truncate(str, maxlength) {
  return (str.length > maxlength) ?
    str.slice(0, maxlength - 1) + '…' : str;
}

5. Let’s try 5 array operations.
Create an array styles with items “James” and “Brennie”.
Append “Robert” to the end.
Replace the value in the middle by “Calvin”. Your code for finding the middle value should work for any arrays with odd length.
Remove the first value of the array and show it.
Prepend Rose and Regal to the array.

const styles = ['James', 'Brennie'];

styles.push('Robert');
console.log(styles);

if(styles.length % 2 != 0){
	var middle = arr[Math.floor(styles.length / 2)];
	styles.splice(middle, 1, 'Calvin');
	console.log(styles);
}

styles.shift();
console.log(styles);

styles.unshift('Rose', 'Regal');
console.log(styles);

7. Validating Email Addresses with RegEx We consider an email address in the form user@domain.extension to be valid if its domain and extension are hackerrank.com and the value of user satisfies the following constraints: 
It starts with between 1 and 6 lowercase English letters denoted by the character class [a-z]. 
The lowercase letter(s) are followed by an optional underscore, i.e. zero or one occurrence of the character. 
The optional underscore is followed by 0 and 4 optional digits denoted by the character class[0-9]. 

function checkEmailId(str){
	var mailformat = /[a-z]{1,6}_{0,1}[0-9]{0,4}@hackerrank\.com/g;
	
	if(str.value.match(mailformat)){
		alert("Valid email address!");
		return true;
	}
	else{
		alert("You have entered an invalid email address!");
		return false;
	}
}